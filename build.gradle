
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        // Shadowing; used to make a fat jar
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
}


repositories {
    mavenCentral()
    jcenter()
}


apply plugin: 'findbugs'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'


group 'ch.unibas.dmi.dbis.chronos'
// Semantic Versioning: http://semver.org/
version '2.3.0-SNAPSHOT'


description = "Chronos Agent"


compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
    compile group: 'com.google.guava', name: 'guava', version: '25.0-jre'

    compile group: 'commons-validator', name: 'commons-validator', version: '1.6'
    compile group: 'commons-net', name: 'commons-net', version: '3.6'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'

    compile group: 'net.lingala.zip4j', name: 'zip4j', version: '1.3.2'
}


jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "Databases and Information Systems Group, Department Mathematics and Computer Science, University of Basel, Switzerland"
        attributes "Version": "$version"
    }
}


shadowJar {
    classifier = ''
}


assemble.dependsOn shadowJar


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


artifacts {
    //archives jar
    archives shadowJar // fat jar which additionally contains all dependencies

    archives sourcesJar // jar file containing the source files
    archives javadocJar // jar file containing the java doc files
}


/////////////
// JAVADOC //
javadoc {
    failOnError = false
}


//////////////
// FINDBUGS //
findbugs {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    effort = 'max'
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
    }
}


//////////////
// INTELLIJ //
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes/main")
        testOutputDir = file("${project.buildDir}/classes/test")
    }
}
