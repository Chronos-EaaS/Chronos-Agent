plugins {
    id 'java-library'
    id 'signing'
    id 'idea'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.11'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    mavenCentral()
}

group = 'org.chronos-eaas'
archivesBaseName = 'chronos-agent'
version = '2.5.1-SNAPSHOT'
description = 'Chronos Agent'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    implementation group: 'com.konghq', name: 'unirest-java-core', version: '4.4.5' // MIT
    implementation group: 'com.konghq', name: 'unirest-object-mappers-gson', version: '4.2.9' // MIT

    implementation group: 'commons-validator', name: 'commons-validator', version: '1.9.0' // Apache 2.0
    implementation group: 'commons-net', name: 'commons-net', version: '3.11.1' // Apache 2.0
    implementation group: 'commons-io', name: 'commons-io', version: '2.18.0' // Apache 2.0

    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.11.5' // Apache 2.0

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.16' // MIT
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(
            'Manifest-Version': '1.0',
            'Copyright': 'The Chronos Project',
            'Group': project.group,
            'Name': project.name,
            'Version': project.version
        )
    }
    dependsOn shadowJar
}

shadowJar {
    archiveClassifier.set('shadow')
    manifest {
        attributes(
            'Manifest-Version': '1.0',
            'Copyright': 'The Chronos Project',
            'Group': project.group,
            'Name': project.name,
            'Version': project.version
        )
    }
}

javadoc {
    failOnError = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name.set('Chronos Agent')
                description.set('Reference implementation of a Chronos Agent.')
                url.set('https://chronos-eaas.org/')
                licenses {
                    license {
                        name.set('MIT License')
                        url.set('https://opensource.org/licenses/MIT')
                    }
                }
                scm {
                    url.set('https://github.com/Chronos-EaaS/Chronos-Agent/')
                }
                developers {
                    developer {
                        id.set('chronos')
                        name.set('Chronos')
                        email.set('mail@chronos-eaas.org')
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = uri(version.endsWith('SNAPSHOT') ? 
                      "https://s01.oss.sonatype.org/content/repositories/snapshots/" :
                      "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/chronos-eaas/chronos-agent")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    useInMemoryPgpKeys(findProperty("signingKey"), findProperty("signingPassword"))
    sign(publishing.publications["mavenJava"])
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main")
        testOutputDir = file("$buildDir/classes/test")
    }
}
